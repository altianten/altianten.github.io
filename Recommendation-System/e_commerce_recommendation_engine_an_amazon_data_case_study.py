# -*- coding: utf-8 -*-
"""E-commerce Recommendation Engine: An Amazon Data Case Study.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fz-DESTsLn0fuQffcuPSwrqUn7QAZG8f
"""

import pandas as pd

# Muat dataset
df = pd.read_csv('/content/robotics.csv')

# Tampilkan 5 baris pertama data
print(df.head())

print("Nilai unik di kolom 'Rating':")
print(df['Rating'].unique())

# Buat salinan eksplisit untuk mencegah SettingWithCopyWarning
df_cleaned = df.copy()

# Hapus baris dengan nilai kosong di kolom 'Rating'
df_cleaned.dropna(subset=['Rating'], inplace=True)

# Bersihkan kolom 'Rating' untuk hanya mengambil angka
# Kita asumsikan formatnya "X.X out of Y stars"
df_cleaned['Rating'] = df_cleaned['Rating'].str.extract('(\d+\.\d+)').astype(float)

# Tampilkan kembali informasi data dan 5 baris pertama
print(df_cleaned.info())
print("\nData setelah dibersihkan:")
print(df_cleaned.head())

from sklearn.feature_extraction.text import TfidfVectorizer

# Inisiasi TF-IDF Vectorizer
# Menggunakan 'english' stop words untuk memfilter kata-kata umum seperti 'a', 'the', dll.
tfidf = TfidfVectorizer(stop_words='english')

# Ubah kolom 'Description' menjadi matriks TF-IDF
tfidf_matrix = tfidf.fit_transform(df_cleaned['Description'])

# Tampilkan ukuran matriks TF-IDF
# Output akan menunjukkan (jumlah produk, jumlah kata unik)
print("Ukuran matriks TF-IDF:")
print(tfidf_matrix.shape)

from sklearn.metrics.pairwise import cosine_similarity

# Hitung matriks kemiripan
cosine_sim = cosine_similarity(tfidf_matrix)

# Tampilkan ukuran matriks kemiripan
print("Ukuran matriks kemiripan:")
print(cosine_sim.shape)

# --- Jalankan semua kode dari awal hingga matriks cosine_sim ---

# Fungsi yang diperbaiki untuk mendapatkan rekomendasi
def get_recommendations(description, cosine_sim=cosine_sim, indices=indices):
    # Dapatkan indeks dari deskripsi produk yang cocok
    idx = indices[description]

    # Dapatkan skor kemiripan dari produk tersebut
    # dan ubah array NumPy menjadi list Python
    sim_scores = list(enumerate(cosine_sim[idx].tolist()))

    # Urutkan berdasarkan skor kemiripan
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Ambil 10 produk yang paling mirip (terkecuali produk itu sendiri)
    sim_scores = sim_scores[1:11]

    # Dapatkan indeks produk-produk yang direkomendasikan
    product_indices = [i[0] for i in sim_scores]

    # Kembalikan daftar deskripsi produk yang direkomendasikan
    return df_cleaned['Description'].iloc[product_indices]

# Uji coba fungsi
# Kamu bisa ganti dengan salah satu deskripsi produk dari data kamu
product_description = df_cleaned['Description'].iloc[0]
print("Rekomendasi untuk produk:", product_description)
print(get_recommendations(product_description))

import matplotlib.pyplot as plt
import seaborn as sns

# Hitung jumlah produk untuk setiap rating
rating_counts = df_cleaned['Rating'].value_counts().sort_index()

# Buat bar chart
plt.figure(figsize=(8, 6))
sns.barplot(x=rating_counts.index, y=rating_counts.values)
plt.title('Distribusi Rating Produk Robotika')
plt.xlabel('Rating Bintang')
plt.ylabel('Jumlah Produk')
plt.show()

from wordcloud import WordCloud

# Gabungkan semua deskripsi menjadi satu teks
all_descriptions = ' '.join(df_cleaned['Description'])

# Buat objek WordCloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_descriptions)

# Tampilkan visualisasinya
plt.figure(figsize=(10, 8))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

# Asumsikan kamu sudah menjalankan semua kode dari awal sampai mendapatkan fungsi get_recommendations
# Pilih sebuah produk acak untuk dijadikan contoh
contoh_produk = df_cleaned['Description'].iloc[10]

# Dapatkan daftar produk yang direkomendasikan
daftar_rekomendasi = get_recommendations(contoh_produk)

# Tampilkan produk yang menjadi acuan
print("--------------------------------------------------")
print("Produk Asli:")
print(contoh_produk)
print("--------------------------------------------------")

# Tampilkan produk yang direkomendasikan dalam format tabel
print("Rekomendasi untuk produk di atas:")
recommended_df = df_cleaned[df_cleaned['Description'].isin(daftar_rekomendasi)].copy()
recommended_df = recommended_df[['Description', 'Price', 'Rating']]

print(recommended_df)